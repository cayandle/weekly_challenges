--WORKER TABLE CREATION
create table WORKERS (
WORKER_ID int not null primary KEY,
FIRST_NAME VARCHAR(40),
LAST_NAME VARCHAR(40),
SALARY INT,
JOINING_DATE DATETIME,
DEPARTMENT VARCHAR(40));

--BONUSES TABLE CREATION
create table BONUSES (
WORKER_REF_ID INT foreign key references Workers(WORKER_ID),
BONUS_DATE DATETIME,
BONUS_AMOUNT INT);

--TITLES TABLE CREATION
create table TITLES (
WORKER_REF_ID INT foreign key references Workers(WORKER_ID),
WORKER_TITLE VARCHAR(40),
AFFECTED_FROM DATETIME);
  
--WORKERS SEEDING
INSERT INTO WORKERS VALUES
(1, 'Rick', 'Smith', 100000, '2021-02-20 09:00:00', 'HR'),
(2, 'Sam', 'Williams', 80000, '2021-06-11 09:00:00', 'Admin'),
(3, 'John', 'Brown', 300000, '2021-02-20 09:00:00', 'HR'),
(4, 'Amy', 'Jones', 500000, '2021-02-20 09:00:00', 'Admin'),
(5, 'Sean', 'Garcia', 500000, '2021-06-11 09:00:00', 'Admin'),
(6, 'Ryan', 'Miller', 200000, '2021-06-11 09:00:00', 'Account'),
(7, 'Patty', 'Davis', 75000, '2021-01-20 09:00:00', 'Account'),
(8, 'Monica', 'Rodriguez', 90000, '2021-04-11 09:00:00', 'Admin');

--BONUSES SEEDING
INSERT INTO BONUSES VALUES
(1, '2021-02-20 00:00:00', 5000),
(2, '2021-06-11 00:00:00', 3000),
(3, '2021-02-20 00:00:00', 4000),
(1, '2021-02-20 00:00:00', 4500),
(2, '2021-06-11 00:00:00', 3500);

--TITLES SEEDING
INSERT INTO TITLES VALUES
(1, 'Manager', '2021-02-20 00:00:00'),
(2, 'Executive', '2021-06-11 00:00:00'),
(8, 'Executive', '2021-06-11 00:00:00'),
(5, 'Manager', '2021-06-11 00:00:00'),
(4, 'Asst. Manager', '2021-06-11 00:00:00'),
(7, 'Executive', '2021-06-11 00:00:00'),
(6, 'Lead', '2021-06-11 00:00:00'),
(3, 'Lead', '2021-06-11 00:00:00');

--GET FIRST NAME, LAST NAME, AND SALARY WHERE SALARY IS BETWEEN 50000 AND 100000
SELECT FIRST_NAME, LAST_NAME, SALARY from WORKERS
WHERE SALARY>=50000 AND SALARY<=100000;

--GET DEPARTMENTS AND NUMBER OF EMPLOYEES IN THOSE DEPARTMENTS
SELECT DEPARTMENT, COUNT(DEPARTMENT) AS NUM_WORKERS FROM WORKERS
GROUP BY DEPARTMENT
ORDER BY NUM_WORKERS DESC;

--GET ALL INTERSECTING RECORDS BETWEEN WORKERS AND BONUSES TABLES
SELECT * FROM WORKERS
INNER JOIN BONUSES ON WORKERS.WORKER_ID = BONUSES.WORKER_REF_ID
ORDER BY WORKERS.WORKER_ID ASC;

--GET FIFTH HIGHEST SALARY WITHOUT LIMIT OR TOP
SELECT DISTINCT SALARY AS FIFTH_HIGHEST_SALARY FROM WORKERS
WHERE (
SELECT COUNT(DISTINCT TEMP.SALARY)
FROM WORKERS TEMP
WHERE TEMP.SALARY > WORKERS.SALARY) = 4;
